										WORKSHOP 3(PART 2)
                                            REFLECTION

 NAME= Khushi          STUDENT ID= 132332206           SENECA EMAIL= kkhushi@myseneca.ca             SUBJECT CODE= BTP200 NAA              SUBMISSION DATE = 29 May,2021

 The workshop 3 deals with the custom type known as class. It underlines the idea of member variables and member functions within the class along with the concept of privatizing the 
 member variables and member functions with in the class. The class type is a custom type much similar to that of structs. By default, the class type keeps the variables and member 
 functions as private which means the end user does not have direct access to the members which are private. The access to the private members is only possible through the public 
 members of the class type. The public members are those which can be easily accessed by the end user directly. In this workshop 3 part 1, the class type ‘Item’ has following member 
 variables and member functions which are kept private in it:

 char m_itemName[21];
 double m_price;
 bool m_taxed;
 void setName(const char* name);

 these members cannot be accessed directly they can be accessed by the following public member functions:

  void setEmpty();
  void set(const char* name, double price, bool taxed);
  void display()const;
  bool isValid()const;
  double price()const;
  double tax()const;
  
  A single class type could have many instances of it in the form of objects as when we are creating an object we are creating an instance and all the data of the object of the class 
  type could be accessed using the public member functions. For example, in part 1 the private member variable ‘m_price’ of class type ‘Item’ can be accessed through the public member
  function ‘double price() const’ by linking the function with the object of the class whose data is required. Apart from this, the workshop deals with formatting the data with input 
  and output functions. No istream member function is used in this workshop but many of ostream member functions are used in this workshop to get the desired format of the output. To 
  access the ostream member functions, the syntax cout.menber_function(arguments) is followed. There are many functions used in this workshop such as fill, width, precision, fixed and
  left. Some member functions need setf and unsetf to set the formatting flag and unset it respectively. The functions, width, fill and precision do not need formatting flags they can
  be used as it is by concatenating with cout using a dot whereas, functions like fixed, left needs the flags to put them in use. While doing this workshop I do not face any 
  complications directly related to coding and generating output. I just faced an issue on the matrix while submitting because of some errors which are displayed on the screen in 
  between my output. To fix that I took the help from my professor, Mr. cornel Barna. The error is because of the missing null terminator at the end of the string which is fixed with 
  the help of the professor. Rest everything goes really well.
